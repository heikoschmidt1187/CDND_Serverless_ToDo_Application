service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_FOR_USER_INDEX: TodosForUserIndex
    AUTH0_JWKS_URL: https://dev-6fg0e-ow.eu.auth0.com/.well-known/jwks.json

functions:
   
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_FOR_USER_INDEX}
     
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # 
  # # TODO: Configure this function
  # UpdateTodo:
  # handler: src/lambda/http/updateTodo.handler
  # events:
  # - http:
  # method: patch
  # path: todos/{todoId}
  # 
  # # TODO: Configure this function
  # DeleteTodo:
  # handler: src/lambda/http/deleteTodo.handler
  # events:
  # - http:
  # method: delete
  # path: todos/{todoId}
  # 
  # # TODO: Configure this function
  # GenerateUploadUrl:
  # handler: src/lambda/http/generateUploadUrl.handler
  # events:
  # - http:
  # method: post
  # path: todos/{todoId}/attachment

resources:
  Resources:
    # GatewayResponseDefault4XX:
    # Type: AWS::ApiGateway::GatewayResponse
    # Properties:
    # ResponseParameters:
    # gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    # gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    # gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
    # ResponseType: DEFAULT_4XX
    # RestApiId:
    # Ref: ApiGatwayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_FOR_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
                